
//
// @type mixin
// @description
// Add show to HTML element using CSS3.
//
// @param $left
// @param $bottom
// @param $depth
// @param $color
//
@mixin box-shadow($left:0, $bottom:0, $depth:1px, $color: #888){
	box-shadow : $left $bottom $depth $color;
	-webkit-box-shadow: $left $bottom $depth $color;
	-moz-box-shadow: $left $bottom $depth $color;
}


//
// @type mixin
// @description
// Mixin is used to add elevation to html element.
// elevation values are defined according Materil specs. 
//
@mixin elevation($value, $position : top){
	///$color : rgba(0, 0, 0, ( $value * 6 / 100 ));
	$elevation : #{ ($value /2) + 'px'};
	$depth : #{$value + 'px'};
	$side : 0;
	$top: 0;
	
	@if $position == right{
		$side : -$elevation;
	
	}

	@if $position == left{
		$side : $elevation;
		
	}

	@if $position == top{
		$top : $elevation;
		
	}

	@if $position == bottom{
		$top : -$elevation;
		
	}
	
	@include box-shadow($side, $top, $depth, rgba(0, 0, 0, 0.5));
	z-index: $value;
}

//
// @type mixin
// @desciption
// Make border rounded by using CSS3 property.
//
// @param $value
//
@mixin border-radius($value){
	/* Safari 3-4, iOS 1-3.2, Android 1.6- */
  -webkit-border-radius: $value; 

  /* Firefox 1-3.6 */
  -moz-border-radius: $value; 
  
  /* Opera 10.5, IE 9, Safari 5, Chrome, Firefox 4, iOS 4, Android 2.1+ */
  border-radius: $value; 
}

//
// @type mixin
// @description
// HTML elements padding and border fall within that elements given width.
// uses CSS3 box-sizing technique. 
//
// @param $value
@mixin box-sizing($value:  border-box){
	-webkit-box-sizing: $value;
	-moz-box-sizing: $value;
	box-sizing: $value;
}

//
// @type mixin
// @description
// Add CSS diaplay property according given parameter.
//
// @param $display
//
@mixin display($display: inline-block){
	display: $display;
	
	@if($display == flex){
		display: -ms-flexbox;
	}

	position: relative;
	vertical-align: top;
	@include box-sizing();
}


//
// @type mixin
// @description
// Define CSS properties inside given device breakpoint limit. 
//
// @param $from start point of view breakpoint
// @param $until end point of view breakpoint
// @param $type  type of devices
@mixin media-query(
		$from: 0, 
		$until: 0, 
		$type: all
		){

			$media-query : '#{$type}';

			@if $from != 0  { 
				$media-query : '#{$media-query} and  (min-width: #{$from})';
			}

			@if $until !=0 {
				$media-query : '#{$media-query} and (max-width: #{$until - 1})';
			}

			@media #{$media-query}{
				@content;
			}

}


//
// @type mixin
// @description
// Evaluate padding of HTML element according given height value and its parent height.
//
// @param $height
// @param $element-height
//
@mixin element-padding($height, $element-height){
	$padding : element-offset($height, $element-height);
	padding-top: $padding;
	//padding-bottom: $padding;
}

//
// Generate Key line padding.
//
@mixin key-line-padding(){
	@include media-query($tablet--breakpoint){
		padding-left: $keyline-large-device;
		padding-right: $keyline-large-device;
	}

	@include media-query(0, $tablet--breakpoint){
		padding-left: $keyline-medium-device;
		padding-right: $keyline-medium-device;
	}
}

//
// Generate Key line margin.
//
@mixin key-line-margin(){
	@include media-query($tablet--breakpoint){
		margin-left: $keyline-large-device;
		margin-right: $keyline-large-device;
	}

	@include media-query(0, $tablet--breakpoint){
		margin-left: $keyline-medium-device;
		margin-right: $keyline-medium-device;
	}
}


//
// @type mixin
// @description
// Define just content CSS properties for different browsers.
//
// @param $value
//
@mixin justfy-content($value){
	webkit-justify-content: #{$value};
    -ms-flex-pack: #{$value};
    justify-content: #{$value};
}


//
// @type mixin
// @description
// Define align items CSS property for different browsers.
//
// @param $value
//
@mixin align-items($value){
	-webkit-align-items: #{$value};
    -ms-flex-align: #{$value};
    align-items: #{$value};
}


//
// @type mixin
// @description
// Define border style for HTML element. 
//
// @param $position
// @param $width
// @param $color
//
@mixin border-style($position, $width, $color){
	border-#{$position}-style : solid;
	border-#{$position}-color : $color;
	border-#{$position}-width : $width;
}


//
// @type mixin
// @description
// Add background property on HTML element's hover event.
@mixin background-hover($color){
	&:hover{
		background: darken($color,10%);
	}
}

@mixin get-opacity($value){
  /* Theoretically for IE 8 & 9 (more valid) */
  /* ...but not required as filter works too */
  /* should come BEFORE filter */
  -ms-filter:"progid:DXImageTransform.Microsoft.Alpha(Opacity=#{$value})"; // IE8

  /* This works in IE 8 & 9 too */
  /* ... but also 5, 6, 7 */
  filter: alpha(opacity=$value); // IE 5-7
  
  /* Modern Browsers */
  opacity: $value / 100;
}


@mixin build-theme-style($theme){
	body {
		background: get-body-backgroud($theme);
		color: get-body-color($theme);
	}

	$component-color: get-component-color($theme) !global;
}

@mixin build-app-theme($theme) {
  @include buid-font-face();
 // Build font opacity
  @include build-app-font-opacity($theme);	
  @include build-theme-style($theme);
}
